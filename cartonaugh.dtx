% \iffalse meta-comment
% Copyright (C) 2015, 2016, 2017 Mattias Jacobsson and contributors
% This work, cartonaugh, is written from the ground up by Mattias Jacobsson. However the general implementation idea is based on the work published on [TeX - LaTeX Stack Exchange](https://tex.stackexchange.com) by [Ignasi](https://tex.stackexchange.com/users/1952/ignasi) found [here](https://tex.stackexchange.com/a/140581) and [here](https://tex.stackexchange.com/a/36879) which is licensed under [CC BY-SA](https://creativecommons.org/licenses/by-sa/3.0/). cartonaugh is therefore licensed under [CC BY-SA](https://creativecommons.org/licenses/by-sa/3.0/). Contributors include [Oscar Gustafsson](https://github.com/oscargus).
% \fi
%
% \iffalse
%<*package>
%<package>%%
%<package>%% Copyright (C) 2015, 2016, 2017 Mattias Jacobsson and contributors
%<package>%% This work, karnaugh-map, is written from the ground up by Mattias Jacobsson. However the general implementation idea is based on the work published on [TeX - LaTeX Stack Exchange](https://tex.stackexchange.com) by [Ignasi](https://tex.stackexchange.com/users/1952/ignasi) found [here](https://tex.stackexchange.com/a/140581) and [here](https://tex.stackexchange.com/a/36879) which is licensed under [CC BY-SA](https://creativecommons.org/licenses/by-sa/3.0/). karnaugh-map is therefore licensed under [CC BY-SA](https://creativecommons.org/licenses/by-sa/3.0/). Contributors include [Oscar Gustafsson](https://github.com/oscargus).
%<package>%%
%<package>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{cartonaugh}[2017/02/20 v1.1 Draw Karnaugh Maps]
%
%<*driver>
  \documentclass{ltxdoc}
  \usepackage{cartonaugh}
  \usepackage{multicol}% for documentation
  \usepackage{tabularx}% for documentation
  \usepackage{float}% for documentation
  \usepackage{hyperref}% for documentation
  \setlength{\parindent}{0pt}
  \setlength{\parskip}{0.6em}
  \EnableCrossrefs
  \CodelineIndex
  \RecordChanges
  \OnlyDescription
  \begin{document}
    \DeleteShortVerb{\|}
    \DocInput{cartonaugh.dtx}
    \PrintChanges
  \end{document}
%</driver>
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2015/10/09}{Initial version}
%
% \GetFileInfo{cartonaugh.sty}
%
% \title{The \textsf{cartonaugh} package}
% \author{Jamal Bouajjaj}
% \date{\textsf{cartonaugh}~\fileversion, \filedate}
%
%\maketitle
%
% \begin{abstract}
%   This package draws karnaugh maps with 2, 3, 4, 5, and 6 variables.
%   It also contains commands for filling the karnaugh map with terms semi-automatically or manually.
%   Last but not least it contains commands for drawing implicants on top of the map.
%   Below is an example of a two variable karnaugh map of $X_0 \oplus X_1$.
% \end{abstract}
% \begin{figure}[H]
%   \centering
%   \begin{cartonaugh}[2][2][1][$X_0$][$X_1$]
%     \minterms{1,2}
%     \autoterms[0]
%     \implicant{1}{1}
%     \implicant{2}{2}
%   \end{cartonaugh}
% \end{figure}
% \tableofcontents
% \pagebreak
%
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################

%%
%% Dependencies
%%

%% Check if ran under LuaLaTeX. If not, exit
\RequirePackage{iftex}
\RequireLuaTeX

%% parsing arguments
\RequirePackage{xparse}

%% working with strings
\RequirePackage{xstring}

%% drawing
\RequirePackage{tikz}
\usetikzlibrary{calc,matrix}

%%
%% Helpers
%%
\directlua{require("cartonaugh")}

%% convert decimal to color
\newcommand{\@cartonaugh@func@decimaltocolor@}[1]{%
  \ifnum#1=0 red\fi
  \ifnum#1=1 green\fi
  \ifnum#1=2 yellow\fi
  \ifnum#1=3 cyan\fi
  \ifnum#1=4 blue\fi
  \ifnum#1=5 magenta\fi
  \ifnum#1>5 cyan\fi
}

%% convert decimal to binary 6-bit
\newcommand{\@cartonaugh@func@decimaltobin@}[1]{\directlua{tex.sprint(decimalToBin(\the\numexpr(#1)\relax, 6))}}

%% command raises an error if executed outside the cartonaugh environment
\newcommand{\@cartonaugh@func@bailoutsideenvironment@}[0]{%
  \ifnum\@cartonaugh@var@mapsizex@\@cartonaugh@var@mapsizey@\@cartonaugh@var@mapsizez@=000
    \PackageError{cartonaugh}{%
      Command can not be used outside cartonaugh environment%
    }{%
      Do not use this command outside the cartonaugh environment.%
    }
  \fi
}

%% store map size
\newcommand{\@cartonaugh@var@mapsizex@}{0}
\newcommand{\@cartonaugh@var@mapsizey@}{0}
\newcommand{\@cartonaugh@var@mapsizez@}{0}

%% render in black and white or color default to '0'(false/color)
\newcommand{\@cartonaugh@var@bw@}{0}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
% \fi
%
% \section{Usage}
%
% \begin{environment}{cartonaugh}
%    The |cartonaugh| environment is the base for this package, and everything related to this package happens inside an instances of this environment.
%
%    \textbf{Usage:}
%    \MakeShortVerb{\|}
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\begin{cartonaugh}|} & \\
%      \small{\meta{*}}           & \small{One asterisk for black and white implicants, non for colorized implicants} \\
%      \small{\oarg{X size}}      & \small{Number of X-axis cells. Default: ''4''} \\
%      \small{\oarg{Y size}}      & \small{Number of Y-axis cells. Default: ''4''} \\
%      \small{\oarg{Z size}}      & \small{Number of X$\times$Y submaps. Default: ''1''} \\
%      \small{\oarg{X label}}     & \small{Label for the X-axis. Default: ''$X_1X_0$''} \\
%      \small{\oarg{Y label}}     & \small{Label for the Y-axis. Default: ''$X_3X_2$''} \\
%      \small{\oarg{Z label}}     & \small{Label for the submaps. Default: ''$X_5X_4$''} \\
%    \end{tabularx}
%    \DeleteShortVerb{\|}
%    \textbf{Example:}
%
%    Four variable karnaugh map, colorized, with X label $X_1X_0$, and Y label $X_3X_2$.
%    \begin{verbatim}
%\begin{cartonaugh}
%\end{cartonaugh}
%
%or
%
%\begin{cartonaugh}[4][4][1][$X_1X_0$][$X_3X_2$]
%\end{cartonaugh}
%    \end{verbatim}
%    Six variable karnaugh map, black and white, with X label $ba$, Y label $dc$, and Z label $fe$.
%    \begin{verbatim}
%\begin{cartonaugh}*[4][4][4][$ba$][$dc$][$fe$]
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\NewDocumentEnvironment{cartonaugh}{s O{4} O{4} O{1} O{$X_1X_0$} O{$X_3X_2$} O{$X_5X_4$}} {%
  \begingroup
    % store map size {[START]
      \renewcommand{\@cartonaugh@var@mapsizex@}{#2}%
      \renewcommand{\@cartonaugh@var@mapsizey@}{#3}%
      \renewcommand{\@cartonaugh@var@mapsizez@}{#4}%
    % [END]}
    % determinate if markings should be color or black and white
    \IfBooleanTF{#1}{%
      % should be black and white
      \renewcommand{\@cartonaugh@var@bw@}{1}%
    }{%
      % should be color
      \renewcommand{\@cartonaugh@var@bw@}{0}%
    }%
    %
    % [END]}
    % test if a matrix template is found or not(aka "\@cartonaugh@local@matrixtemplate@" equals to '0')
%     \ifnum0=\@karnaughmap@local@matrixtemplate@
%       print error if no template could be found
%       \PackageError{karnaugh-map}{%
%         Can not find a template fitting your specification (\@karnaughmap@var@mapsizex@\space x \@karnaughmap@var@mapsizey@\space x \@karnaughmap@var@mapsizez@)%
%       }{%
%         Existing templates have the following dimensions: 2x2x1, 2x4x1, 4x2x1, 4x4x1, 4x4x2, and 4x4x4.
%       }%
%     \fi
    \begin{tikzpicture}
        \directlua{draw_pgf_kmap(
                   \the\numexpr(\@cartonaugh@var@mapsizex@)\relax,
                   \the\numexpr(\@cartonaugh@var@mapsizey@)\relax,
                   \the\numexpr(\@cartonaugh@var@mapsizez@)\relax,
                   "\luaescapestring{\detokenize{#5}}",
                   "\luaescapestring{\detokenize{#6}}",
                   "\luaescapestring{\detokenize{#7}}"
                   )}
}{
    \end{tikzpicture}
  \endgroup
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
% \fi
% \end{environment}
%
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################

%%
%% Commands for filling out the cells
%%

%% store already used cells to avoid double filled cells and for auto completion
\newcommand{\@cartonaugh@var@usedcells@}{,}

% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
% \fi
%
% \newpage
% \MakeShortVerb{\|}
% \subsection{Terms}
% \begin{macro}{\autoterms}
%    The |\autoterms| command fills the remaining unfilled cells of the karnaugh map with the contents of the optional argument.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\autoterms|}   & \\
%      \small{\oarg{content}} & \small{Content for the remaining unfilled cells. Default: ''-''}
%    \end{tabularx}
%
%    \textbf{Example:}
%
%    Fill all remaining unfilled cells with ''-''.
%    \begin{verbatim}
% \DeleteShortVerb{\|}
%\begin{cartonaugh}
%  \autoterms[-]
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\autoterms}{O{-}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \begingroup
    % calculate max cell number {[START]
      \newcount\@cartonaugh@local@max@\relax
      \@cartonaugh@local@max@=\@cartonaugh@var@mapsizex@\relax
      \multiply\@cartonaugh@local@max@ by \@cartonaugh@var@mapsizey@\relax
      \multiply\@cartonaugh@local@max@ by \@cartonaugh@var@mapsizez@\relax
      \advance\@cartonaugh@local@max@ by -1\relax
    % [END]}
    % fill terms
    \foreach \cell in {0,1,2,...,\@cartonaugh@local@max@} {%
      \IfSubStr{\@cartonaugh@var@usedcells@}{,\cell,}{}{%
        \path (\@cartonaugh@func@decimaltobin@{\cell}) node {#1};
      }
    }
  \endgroup
  % update \@cartonaugh@var@usedcells@ (all cells are used now)
  \renewcommand{\@cartonaugh@var@usedcells@}{,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,}
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
% \fi
%
% \end{macro}
%
% \begin{macro}{\indeterminants}
%    The |\indeterminants| command fills the specified cells with ''-'' if they aren't already filled. Order of the cell numbers does not matter.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\indeterminants|} & \\
%      \small{\marg{cells}}   & \small{Comma separated list of cells to fill with ''-''}
%    \end{tabularx}
%
%    \textbf{Example:}
%
%    Fill the top left and right cell with ''-''.
%    \begin{verbatim}
%\begin{cartonaugh}
%  \indeterminants{0,2}
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\indeterminants}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \terms{#1}{-}
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
% \fi
% 
% \end{macro}
%
% \begin{macro}{\manualterms}
%    The |\manualterms| command fills the 0th cell with the first element in the argument, the 1st cell with the second element in the argument, and so on. If any of the cells already is filled, it is left as it was.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\manualterms|} & \\
%      \small{\marg{content}} & \small{Comma separated list of cell contents}
%    \end{tabularx}
%
%    \textbf{Example:}
%
%    Fill the first four cells with 0, 1, 0, and 1 respectively.
%    \begin{verbatim}
%\begin{cartonaugh}
%  \manualterms{0,1,0,1}
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\manualterms}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \foreach \cellinfo [count=\cell from 0] in {#1} {%
    % only write to cell if it is empty otherwise fail silently
    \IfSubStr{\@cartonaugh@var@usedcells@}{,\cell,}{}{%
      \path (\@cartonaugh@func@decimaltobin@{\cell}) node {\cellinfo};
    }
  }
  % update \@cartonaugh@var@usedcells@ (previous cells + all cells up to \@cartonaugh@local@cellcount@ are used now) {[START]
    \newcommand{\@cartonaugh@local@tmpusedcells@}{}
    \newcount\@cartonaugh@local@cellcount@\relax
    % count number of cells in #1 {[START]
      \StrCount{#1}{,}[\@cartonaugh@local@tmpusedcells@]
      \@cartonaugh@local@cellcount@=\@cartonaugh@local@tmpusedcells@\relax
      \advance\@cartonaugh@local@cellcount@ by 1\relax
      \multiply\@cartonaugh@local@cellcount@ by 2\relax
    % [END]}
    % create sequence for \@cartonaugh@local@tmpusedcells@
    \StrLeft{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,}{\@cartonaugh@local@cellcount@}[\@cartonaugh@local@tmpusedcells@]
    % update \@cartonaugh@var@usedcells@ (append \@cartonaugh@local@tmpusedcells@)
    \expandafter\def\expandafter\@cartonaugh@var@usedcells@\expandafter{\@cartonaugh@var@usedcells@\@cartonaugh@local@tmpusedcells@}
  % [END]}
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
% \fi
% 
% \end{macro}
%
% \newpage
% \begin{macro}{\maxterms}
%    The |\maxterms| command fills the specified cells with ''0'' if they aren't already filled. Order of the cell numbers does not matter.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\maxterms|}  & \\
%      \small{\marg{cells}} & \small{Comma separated list of cells to fill with ''0''} \\
%    \end{tabularx}
%
%    \textbf{Example:}
%
%    Fill the top left and right cell with ''0''.
%    \begin{verbatim}
%\begin{cartonaugh}
%  \maxterms{0,2}
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\maxterms}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \terms{#1}{0}
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
% \end{macro}
%
% \begin{macro}{\minterms}
%    The |\minterms| command fills the specified cells with ''1'' if they aren't already filled. Order of the cell numbers does not matter.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\minterms|}  & \\
%      \small{\marg{cells}} & \small{Comma separated list of cells to fill with ''1''} \\
%    \end{tabularx}
%
%    \textbf{Example:}
%
%    Fill the top left and right cell with ''1''.
%    \begin{verbatim}
%\begin{cartonaugh}
%  \minterms{0,2}
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\minterms}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \terms{#1}{1}
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
% \end{macro}
%
% \begin{macro}{\terms}
%    \changes{v1.1}{2017/02/06}{Support user specified term content and variable entered maps}
%    The |\terms| command fills the specified cells with the specified content if they aren't already filled. Order of the cell numbers does not matter.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\terms|}  & \\
%      \small{\marg{cells}} & \small{Comma separated list of cells to fill with content} \\
%      \small{\marg{content}} & \small{Content to fill the cells with} \\
%    \end{tabularx}
%
%    \textbf{Example:}
%
%    Fill the top left and right cell with ''X''.
%    \begin{verbatim}
%\begin{cartonaugh}
%  \terms{0,2}{X}
%\end{cartonaugh}
%    \end{verbatim}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\terms}{m m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \foreach \cell in {#1} {%
    % only write to cell if it is empty otherwise fail silently
    \IfSubStr{\@cartonaugh@var@usedcells@}{,\cell,}{}{%
      \path (\@cartonaugh@func@decimaltobin@{\cell}) node {#2};
    }
  }
  % update \@cartonaugh@var@usedcells@
  \expandafter\def\expandafter\@cartonaugh@var@usedcells@\expandafter{\@cartonaugh@var@usedcells@#1,}
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
% \end{macro}
%
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################

%%
%% Commands for marking the cells
%%

%% keep track of used colors
\newcount\@cartonaugh@var@colorindex@\relax
\@cartonaugh@var@colorindex@=0\relax

% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
%
% \newpage
% \MakeShortVerb{\|}
% \subsection{Implicants}
% \begin{macro}{\implicant}
%    The |\implicant| command draws quadratic implicants on one or multiple submaps. If the implicant shall be drawn on multiple submaps, \marg{northwest cell} and \marg{southeast cell} must be specified as if the implicant was to be drawn on the 0:th submap. When turned on, colorization is done automatically, following a global sequence of available colors.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\implicant|}          & \\
%      \small{\marg{northwest cell}} & \small{The most northwest cell in the implicant} \\
%      \small{\marg{southeast cell}} & \small{The most southeast cell in the implicant} \\
%      \small{\oarg{submaps}}        & \small{Comma separated list of submaps the implicant should be drawn on. Default: ''0''} \\
%    \end{tabularx}
%
%    \textbf{Example:}
%    \DeleteShortVerb{\|}
%    \begin{multicols}{2}
%      [Implicant around the four most inner cells.]
%      \begin{verbatim}
%\begin{cartonaugh}
%  \implicant{5}{15}
%\end{cartonaugh}
%      \end{verbatim}
%      \columnbreak
%      \resizebox{\columnwidth}{!}{
%        \begin{cartonaugh}
%          \implicant{5}{15}
%        \end{cartonaugh}
%      }
%    \end{multicols}
%    \begin{multicols}{2}
%      [Single cell implicant, 0:th cell, on all four submaps.]
%      \begin{verbatim}
%\begin{cartonaugh}[4][4][4]
%  \implicant{0}{0}[0,1,2,3]
%\end{cartonaugh}
%      \end{verbatim}
%      \columnbreak
%      \resizebox{\columnwidth}{!}{
%        \begin{cartonaugh}[4][4][4]
%          \implicant{0}{0}[0,1,2,3]
%        \end{cartonaugh}
%      }
%    \end{multicols}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\implicant}{m m O{0}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \begingroup
    % loop through specified sub maps
    \foreach \map in {#3} {%
      % make sure we don't try to draw on non existing sub maps
      \ifnum\map<\@cartonaugh@var@mapsizez@
        % calculate cell number for the specified sub maps {[START]
          \newcount\@cartonaugh@local@northwest@\relax
          \newcount\@cartonaugh@local@southeast@\relax
          \@cartonaugh@local@northwest@=\map\relax
          \@cartonaugh@local@southeast@=\map\relax
          \multiply\@cartonaugh@local@northwest@ by 16\relax
          \multiply\@cartonaugh@local@southeast@ by 16\relax
          \advance\@cartonaugh@local@northwest@ by #1\relax
          \advance\@cartonaugh@local@southeast@ by #2\relax
        % [END]}
        % only fill marking when \@cartonaugh@var@bw@ = '0'
        \ifnum0=\@cartonaugh@var@bw@
          \fill[
            rounded corners=3pt,
            fill=\@cartonaugh@func@decimaltocolor@{\@cartonaugh@var@colorindex@},
            fill opacity=0.25,
          ] {
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@northwest@}.center)+(-0.3,0.3)$)
            rectangle
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@southeast@}.center)+(0.3,-0.3)$)
          };
        \fi
        \draw[
          rounded corners=3pt,
          draw opacity=1.0,
        ] {
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@northwest@}.center)+(-0.3,0.3)$)
          rectangle
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@southeast@}.center)+(0.3,-0.3)$)
        };
      \else
        \PackageWarning{cartonaugh}{%
          You can only draw on existing sub maps.
          Ignoring instruction to draw on non existing sub map number \map%
        }
      \fi
    }
  \endgroup
  % mark color as used
  \advance\@cartonaugh@var@colorindex@ by 1\relax
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
% \end{macro}
%
% \newpage
% \MakeShortVerb{\|}
% \begin{macro}{\implicantedge}
%    The |\implicantedge| command draws quadratic implicants with the middle of the implicant facing the edge of a submap either horizontally or vertically. The function is able to draw the same implicant on one or multiple submaps. However if the implicant shall be drawn on multiple submaps, \marg{northwest part - northwest cell}, \marg{northwest part - southeast cell}, \marg{southeast part - northwest cell}, \marg{southeast part - southeast cell} must be specified as if the implicant was to be drawn on the 0:th submap. When turned on, colorization is done automatically, following a global sequence of available colors.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\implicantedge|}                       & \\
%      \small{\marg{northwest part - northwest cell}} & \small{The most northwest cell in the northwest part of the implicant} \\
%      \small{\marg{northwest part - southeast cell}} & \small{The most southeast cell in the northwest part of the implicant} \\
%      \small{\marg{southeast part - northwest cell}} & \small{The most northwest cell in the southeast part of the implicant} \\
%      \small{\marg{southeast part - southeast cell}} & \small{The most southeast cell in the southeast part of the implicant} \\
%      \small{\oarg{submaps}}                         & \small{Comma separated list of submaps the implicant should be drawn on. Default: ''0''} \\
%    \end{tabularx}
%
%    \textbf{Example:}
%    \DeleteShortVerb{\|}
%
%    \begin{multicols}{2}
%      [Horizontal implicant over the submap edge containing the cells 4, 6, 12, and 14.]
%      \begin{verbatim}
%\begin{cartonaugh}
%  \implicantedge{4}{12}{6}{14}
%\end{cartonaugh}
%      \end{verbatim}
%      \columnbreak
%      \resizebox{\columnwidth}{!}{
%        \begin{cartonaugh}
%          \implicantedge{4}{12}{6}{14}
%        \end{cartonaugh}
%      }
%    \end{multicols}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\implicantedge}{m m m m O{0}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \begingroup
    % helper variables {[START]
      \newcommand{\@cartonaugh@local@orientation@}{0} % '0' is a vertical and '1' is a horizontal implicant
      \newcommand{\@cartonaugh@local@coordinateone@}{0}
      \newcommand{\@cartonaugh@local@coordinatetwo@}{0}
      \newcommand{\@cartonaugh@local@mirror@}{1} % '1' or '-1' to mirror
      \newcommand{\@cartonaugh@local@bordercontent@}{}
      \newcommand{\@cartonaugh@local@fillcontent@}{}
    % [END]}
    % determinate if this is an horizontal or vertical implicant {[START]
      \newcount\@cartonaugh@local@testcaseone@\relax
      \newcount\@cartonaugh@local@testcasetwo@\relax
      \@cartonaugh@local@testcaseone@=#1\relax
      \@cartonaugh@local@testcasetwo@=#1\relax
      \advance\@cartonaugh@local@testcaseone@ by -#2\relax
      \advance\@cartonaugh@local@testcasetwo@ by -#3\relax
      \ifnum\@cartonaugh@local@testcaseone@<0 \multiply\@cartonaugh@local@testcaseone@ by -1\relax\fi
      \ifnum\@cartonaugh@local@testcasetwo@<0 \multiply\@cartonaugh@local@testcasetwo@ by -1\relax\fi
      % test case one
      \ifnum\@cartonaugh@local@testcaseone@<\@cartonaugh@var@mapsizex@
        % this is a vertical implicant
        \renewcommand{\@cartonaugh@local@orientation@}{0}
      \else
        % this is a horizontal implicant
        \renewcommand{\@cartonaugh@local@orientation@}{1}
      \fi
      % test case two
      \ifnum\@cartonaugh@local@testcasetwo@<\@cartonaugh@var@mapsizex@
        % this is a vertical implicant
        \renewcommand{\@cartonaugh@local@orientation@}{1}
      \fi
    % [END]}
    % loop through specified sub maps
    \foreach \map in {#5} {%
      % make sure we don't try to draw on non existing sub maps
      \ifnum\map<\@cartonaugh@var@mapsizez@
        % loop through both parts of the marking(ie. left and right part)
        \foreach \i in {0,1} {%
          % set parameters depending on the part of the marking(ie. left and right part) {[START]
            \ifnum\i=0
              \renewcommand{\@cartonaugh@local@coordinateone@}{#1}
              \renewcommand{\@cartonaugh@local@coordinatetwo@}{#2}
              \renewcommand{\@cartonaugh@local@mirror@}{1}
            \else
              \renewcommand{\@cartonaugh@local@coordinateone@}{#3}
              \renewcommand{\@cartonaugh@local@coordinatetwo@}{#4}
              \renewcommand{\@cartonaugh@local@mirror@}{-1}
            \fi
          % [END]}
          % calculate cell numbers for the specified sub map {[START]
            \newcount\@cartonaugh@local@coordinateonecounter@\relax
            \newcount\@cartonaugh@local@coordinatetwocounter@\relax
            \@cartonaugh@local@coordinateonecounter@=\map\relax
            \@cartonaugh@local@coordinatetwocounter@=\map\relax
            \multiply\@cartonaugh@local@coordinateonecounter@ by 16\relax
            \multiply\@cartonaugh@local@coordinatetwocounter@ by 16\relax
            \advance\@cartonaugh@local@coordinateonecounter@ by \@cartonaugh@local@coordinateone@\relax
            \advance\@cartonaugh@local@coordinatetwocounter@ by \@cartonaugh@local@coordinatetwo@\relax
            \renewcommand{\@cartonaugh@local@coordinateone@}{\@cartonaugh@local@coordinateonecounter@}
            \renewcommand{\@cartonaugh@local@coordinatetwo@}{\@cartonaugh@local@coordinatetwocounter@}
          % [END]}
          % select drawing content depending on orientation {[START]
            \ifnum\@cartonaugh@local@orientation@=0
              % this is a vertical implicant
              \renewcommand{\@cartonaugh@local@fillcontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,.6*\@cartonaugh@local@mirror@)$)
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,.6*\@cartonaugh@local@mirror@)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,-.3*\@cartonaugh@local@mirror@)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,-.3*\@cartonaugh@local@mirror@)$) }
                -- cycle
              }
              \renewcommand{\@cartonaugh@local@bordercontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,.6*\@cartonaugh@local@mirror@)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,-.3*\@cartonaugh@local@mirror@)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,-.3*\@cartonaugh@local@mirror@)$) }
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,.6*\@cartonaugh@local@mirror@)$)
              }
            \else
              % this is a horizontal implicant
              \renewcommand{\@cartonaugh@local@fillcontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(-.6*\@cartonaugh@local@mirror@,-.3)$)
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.6*\@cartonaugh@local@mirror@,.3)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(.3*\@cartonaugh@local@mirror@,.3)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3*\@cartonaugh@local@mirror@,-.3)$) }
                -- cycle
              }
              \renewcommand{\@cartonaugh@local@bordercontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.6*\@cartonaugh@local@mirror@,.3)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(.3*\@cartonaugh@local@mirror@,.3)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3*\@cartonaugh@local@mirror@,-.3)$) }
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(-.6*\@cartonaugh@local@mirror@,-.3)$)
              }
            \fi
          % [END]}
          % draw
          % only fill marking when \@cartonaugh@var@bw@ = '0'
          \ifnum0=\@cartonaugh@var@bw@
            \fill[
              sharp corners,
              fill=\@cartonaugh@func@decimaltocolor@{\@cartonaugh@var@colorindex@},
              fill opacity=0.25,
            ] {
              \@cartonaugh@local@fillcontent@%
            };
          \fi
          \draw[
            sharp corners,
            draw opacity=1.0,
          ] {
            \@cartonaugh@local@bordercontent@%
          };
        }
      \else
        \PackageWarning{cartonaugh}{%
          You can only draw on existing sub maps.
          Ignoring instruction to draw on non existing sub map number \map%
        }
      \fi
    }
  \endgroup
  % mark color as used
  \advance\@cartonaugh@var@colorindex@ by 1\relax
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
% \end{macro}
% \MakeShortVerb{\|}
% \newpage
% \begin{macro}{\implicantcorner}
%    The |\implicantcorner| command draws an implicant around only the four corner pieces on one or multiple four variable karnaugh submaps. When turned on, colorization is done automatically, following a global sequence of available colors.
%
%    \textbf{Usage:}
%
%    \begin{tabularx}{\textwidth}{l X}
%      \small{|\implicantcorner|} & \\
%      \small{\oarg{submaps}}     & \small{Comma separated list of submaps the implicant should be drawn on. Default: ''0''} \\
%    \end{tabularx}
%
%    \textbf{Example:}
%    \DeleteShortVerb{\|}
%
%    \begin{multicols}{2}
%      [Draw an implicant around all corners on 0th and 2nd submap of a six variable karnaugh map.]
%      \begin{verbatim}
%\begin{cartonaugh}[4][4][4]
%  \implicantcorner[0,2]
%\end{cartonaugh}
%      \end{verbatim}
%      \columnbreak
%      \resizebox{\columnwidth}{!}{
%        \begin{cartonaugh}[4][4][4]
%          \implicantcorner[0,2]
%        \end{cartonaugh}
%      }
%    \end{multicols}
% 
% \iffalse
%    \begin{macrocode}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                              CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
\DeclareDocumentCommand{\implicantcorner}{O{0}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  % make sure "\implicantcorner" only are used on 4x4 maps
  \ifnum\@cartonaugh@var@mapsizex@\@cartonaugh@var@mapsizey@=44
    % loop through specified sub maps
    \foreach \map in {#1} {%
      % make sure we don't try to draw on non existing sub maps
      \ifnum\map<\@cartonaugh@var@mapsizez@
        % loop through the four corners
        \foreach \corner in {0,2,8,10} {%
          % calculate corner's properties {[START]
            \newcount\@cartonaugh@local@coordinate@\relax
            \@cartonaugh@local@coordinate@=\map\relax
            \multiply\@cartonaugh@local@coordinate@ by 16\relax
            \advance\@cartonaugh@local@coordinate@ by \corner\relax
            \newcommand{\@cartonaugh@local@mirrorx@}{0} % '1' or '-1' to mirror
            \newcommand{\@cartonaugh@local@mirrory@}{0} % '1' or '-1' to mirror
            \ifnum\corner=0 \renewcommand{\@cartonaugh@local@mirrorx@}{1}\renewcommand{\@cartonaugh@local@mirrory@}{1}\fi
            \ifnum\corner=2 \renewcommand{\@cartonaugh@local@mirrorx@}{-1}\renewcommand{\@cartonaugh@local@mirrory@}{1}\fi
            \ifnum\corner=8 \renewcommand{\@cartonaugh@local@mirrorx@}{1}\renewcommand{\@cartonaugh@local@mirrory@}{-1}\fi
            \ifnum\corner=10 \renewcommand{\@cartonaugh@local@mirrorx@}{-1}\renewcommand{\@cartonaugh@local@mirrory@}{-1}\fi
          % [END]}
          % draw
          % only fill marking when \@cartonaugh@var@bw@ = '0'
          \ifnum0=\@cartonaugh@var@bw@
            \fill[
              sharp corners,
              fill=\@cartonaugh@func@decimaltocolor@{\@cartonaugh@var@colorindex@},
              fill opacity=0.25,
            ]
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(-.6*\@cartonaugh@local@mirrorx@,.6*\@cartonaugh@local@mirrory@)$)
            --
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,.6*\@cartonaugh@local@mirrory@)$)
            { [rounded corners=3pt] --
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$) }
            --
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(-.6*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$)
            -- cycle;
          \fi
          \draw[
            sharp corners,
            draw opacity=1.0,
          ]
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,.6*\@cartonaugh@local@mirrory@)$)
          { [rounded corners=3pt] --
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$) }
          --
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(-.6*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$);
        }
      \else
        \PackageWarning{cartonaugh}{%
          You can only draw on existing sub maps.
          Ignoring instruction to draw on non existing sub map number \map%
        }
      \fi
    }
    % mark color as used
    \advance\@cartonaugh@var@colorindex@ by 1\relax
  \else
    % print error if "\implicantcorner" are used on non 4x4 map
    \PackageError{cartonaugh}{%
      \protect\implicantcorner\space can only be used on 4x4 maps%
    }{%
      You are trying to use \protect\implicantcorner\space on non 4x4 map.%
    }
  \fi
}
% ^^A ##########################################################################
% ^^A ##########################################################################
% ^^A ####                             /CODE                                ####
% ^^A ##########################################################################
% ^^A ##########################################################################
%    \end{macrocode}
%\fi
% 
% \end{macro}
%
% \newpage
% \section{Examples}
%   \begin{multicols}{2}
%     [Draw a karnaugh map for \small{$f(a,b,c,d,e,f) =$\\$\Sigma(0,1,2,3,8,13,17,20,22,28,33,32,30,19,40,35,49,42,34,10,60,54,62,51,52)$\\$+d(15,45,47)$}.]
%     \begin{verbatim}
%\begin{cartonaugh}[4][4][4][$ba$][$dc$][$fe$]
%  \minterms{0,1,2,3,8,13,17,20,22,28,
%    33,32,30,19,40,35,49,42,34,10,60,
%    54,62,51,52}
%  \indeterminants{15,45,47}
%  \autoterms[0]
%  \implicantcorner[0,2]
%  \implicant{1}{3}[0,1,2,3]
%  \implicantedge{4}{12}{6}{14}[1,3]
%  \implicant{13}{15}[0,2]
%\end{cartonaugh}
%     \end{verbatim}
%     \columnbreak
%     \resizebox{\columnwidth}{!}{
%       \begin{cartonaugh}[4][4][4][$ba$][$dc$][$fe$]
%         \minterms{0,1,2,3,8,13,17,20,22,28,33,32,30,19,40,35,49,42,34,10,60,54,62,51,52}
%         \indeterminants{15,45,47}
%         \autoterms[0]
%         \implicantcorner[0,2]
%         \implicant{1}{3}[0,1,2,3]
%         \implicantedge{4}{12}{6}{14}[1,3]
%         \implicant{13}{15}[0,2]
%       \end{cartonaugh}
%     }
%   \end{multicols}
%
%   \begin{multicols}{2}
%     [Draw a karnaugh map for \small{$f(X_0,X_1) = \Pi(0,2,3)$} in black and white.]
%     \begin{verbatim}
%\begin{cartonaugh}*[2][2][1][$X_0$][$X_1$]
%  \maxterms{0,2,3}
%  \autoterms[1]
%  \implicant{1}{1}
%\end{cartonaugh}
%     \end{verbatim}
%     \columnbreak
%     \resizebox{\columnwidth}{!}{
%       \begin{cartonaugh}*[2][2][1][$X_0$][$X_1$]
%         \maxterms{0,2,3}
%         \autoterms[1]
%         \implicant{1}{1}
%       \end{cartonaugh}
%     }
%   \end{multicols}
%
%   \newpage
%   \begin{multicols}{2}
%     [Draw a variable entered map.]
%     \begin{verbatim}
%\begin{cartonaugh}[4][2][1][$ab$][$c$]
%  \maxterms{0,2,4,5,6}
%  \minterms{3}
%  \terms{1}{$d$}
%  \terms{7}{$d'$}
%  \implicant{1}{3}
%  \implicant{3}{7}
%\end{cartonaugh}
%     \end{verbatim}
%     \columnbreak
%     \resizebox{\columnwidth}{!}{
%       \begin{cartonaugh}[4][2][1][$ab$][$c$]
%         \maxterms{0,2,4,5,6}
%         \minterms{3}
%         \terms{1}{$d$}
%         \terms{7}{$d'$}
%         \implicant{1}{3}
%         \implicant{3}{7}
%       \end{cartonaugh}
%     }
%   \end{multicols}
%
% \section{Dependencies}
% \begin{itemize}
%   \item tikz
%   \item xparse
%   \item xstring
% \end{itemize}
%
% \newpage
% \section{Miscellaneous}
% \MakeShortVerb{\|}
% \subsection*{Resizing}
% The karnaugh maps produced with this package have a prespecified size which can not be changed. However you can resize the karnaugh map to your desired size. Resizing can be done using the |\resizebox| command from the graphicx package. Scaling the karnaugh map to fill the column width while preserving the aspect ratio can be done as follows.
% \begin{verbatim}
%\resizebox{\columnwidth}{!}{
% \DeleteShortVerb{\|}
%  \begin{cartonaugh}
%  \end{cartonaugh}
%}
% \end{verbatim}
%
% \subsection*{Comma separated lists}
% Anywhere in this package where a comma separated list is used data should only be comma separated. Therefore a comma and space separeated list will for example \textit{not} work properly.
%
% An example of errorious usage related to the \small{\marg{cells}} parameter in the terms related commands can result in multiple zeros, ones and other terms overlapping in the same cell in the outputted karnaugh map.
%
%
%</package>
%<*luacode>
%
% This is the Luacode that is generated and put into cart**.lua
% \iffalse
%\begin{macrocode}
DEBUG_FLAG = 0

-- Function that is used to either print to LaTeX or to the console
-- Used for debugging mode
function localPrint(str)
    if DEBUG_FLAG==1 then
        print(str)
    end
    tex.sprint(str)
end

-- Function that converts a decimal number to binary
function decimalToBin(num, numb_bits, return_concat)
    if return_concat == nil then return_concat=true end
    num = tonumber(num)
    numb_bits = tonumber(numb_bits)
    local t={}
    for b=numb_bits,1,-1 do
        rest=math.floor(math.fmod(num,2))
        t[b]=rest
        num=(num-rest)/2
    end
    if return_concat == true then
        return table.concat(t)
    else
        return t
    end
end

-- Function that converts a decimal number to grey code
function decimalToGreyBin(num, numb_bits)
    -- Get the binary array
    local t = decimalToBin(num, numb_bits, false)
    local tg={}
    -- Find grey code from binary by XORing the previous bit going from MSB to LSB
    for b=1,numb_bits,1 do
        if b == 1 then
            tg[b] = t[b]
        else
            tg[b] = t[b] ~ t[b-1]
        end
    end
    return table.concat(tg)
end

-- Function to pad a string by a amount with b string
function padString(str, pad_to, pad_with)
    local ret = str
    for l=1, (pad_to-string.len(str)) do
        ret = pad_with .. ret
    end
    return ret
end

-- Function to generate a kmap template
function generateKMap(column, row, grid_numb)
    local outside_column_bits = 1
    local outside_row_bits = 1
    local outside_grid_numb_bits = 2
    local return_str = ''
    if row >= 4 then
        outside_row_bits = 2
    end
    if column >= 4 then
        outside_column_bits = 2
    end
    for c=1,column,1 do
        for r=1,row,1 do
            if r == 0 then
                if c == 0 then

                elseif c == (column+1) then
                    return_str = return_str .. ("\\phantom{" .. decimalToBin(0, outside_column_bits) .. "}")
                else
                    return_str = return_str .. (decimalToGreyBin(c-1, outside_column_bits))
                end
            elseif r==(row+1) then
                if c==0 then
                    return_str = return_str .. ("\\phantom{" .. decimalToBin(0, outside_column_bits) .. "}")
                end
            else
                if c == 0 then
                    return_str = return_str .. (decimalToGreyBin(r-1, outside_row_bits))
                elseif c == (column+1) then

                else
    --                     localPrint("|(" .. "00" ..
    --                     decimalToGreyBin((c-1), 2) ..
    --                     decimalToGreyBin((r-1), 2) ..  ")|" .. "\\phantom{0}")
                    return_str = return_str ..("|(" .. padString((decimalToGreyBin(grid_numb, outside_grid_numb_bits) .. decimalToGreyBin(c-1, outside_column_bits) .. decimalToGreyBin(r-1, outside_row_bits)), 6, 0) ..  ")|" .. "\\phantom{0}")
                    --TODO: Look into why reversing c and r from where they should be makes it work
                end
            end

            if r == (row) then
                return_str = return_str .. ("\\\\")
            else
                return_str = return_str .. ("\\&")
            end
        end
    end
    return return_str
end

-- Function to generate the k-maps
-- NOTE: Each variable/cell in the k-map is 1cm. This is so that everything alings with each other just be adding 
-- the number of row and column. It's a bit of hack, but for now it will stay this way. Resizing of the matrix 
-- will be done with the scale option in the future
function draw_pgf_kmap(column, row, grid_numb, var1, var2, var3)
    grid_numb = grid_numb-1
    -- TODO: Transform the following settings variables into arguments
    local is_multitable_seperated = true    -- Setting to determine if the graphs are drawn with a sperator line or distanced out
    local graph_seperator = 1.5                -- Seperation lenght between kmaps if is_multitable_seperated=false
    local kmaplevel_seperator_lenght = 0.1   -- Setting to determine the seperator line's thickness if is_multitable_seperated=true
    local line_width = 0.015                 -- Set the line thickness of things here
    local zero_var_line_lenght = 0.75         -- The lenght of the line at the top-left corner of the kmap where the implacants reside
    local column_header_numb_bits = ((column-1) // 2)+1
    local row_header_numb_bits = ((row-1) // 2)+1
    if is_multitable_seperated then graph_seperator = 0 end
    for d=0,grid_numb,1 do
        -- Find the top-left corner of each grid (seperated by 1 unit)
        local grid_x_loc = (d % 2)*(column+graph_seperator)
        local grid_y_loc = -(d // 2)*(row+graph_seperator)
    --         localPrint(string.format("\\node[above] at (%f,%f) {\\small{%s}};", 0, 0, abimplecant))
        if is_multitable_seperated then
            if (d % 2) == 1 then
                local add_heigh = 0
                if d >= 2 then add_heigh = kmaplevel_seperator_lenght end
                localPrint(string.format("\\fill[black] (%f,%f) rectangle (%f,%f);", grid_x_loc, grid_y_loc, grid_x_loc+kmaplevel_seperator_lenght, grid_y_loc-row-line_width-add_heigh))
                grid_x_loc = grid_x_loc + kmaplevel_seperator_lenght
            end
            if d >= 2 then
                localPrint(string.format("\\fill[black] (%f,%f) rectangle (%f,%f);", grid_x_loc, grid_y_loc, grid_x_loc+column+line_width, grid_y_loc-kmaplevel_seperator_lenght))
                grid_y_loc = grid_y_loc - kmaplevel_seperator_lenght
            end
        end
        -- Print out the top-left line corner with the variables
        if (is_multitable_seperated == false) or (d==0) then
            localPrint(string.format("\\draw[inner sep=0pt, outer sep=0pt] (%f, %f) -- (%f, %f);", grid_x_loc+line_width, grid_y_loc-line_width, grid_x_loc-zero_var_line_lenght, grid_y_loc+zero_var_line_lenght))
            localPrint(string.format("\\node[right] at (%f,%f) {\\small{%s}};", grid_x_loc-0.6, grid_y_loc+0.6, var1))
            localPrint(string.format("\\node[left] at (%f,%f) {\\small{%s}};", grid_x_loc-0.3, grid_y_loc+0.3, var2))
        end
        -- Print out the top boolean column header
        if (is_multitable_seperated == false) or (d < 2) then
            localPrint(string.format("\\matrix[matrix of nodes, ampersand replacement=\\&, column sep={1cm,between origins}, nodes={align=center,text width=1cm,inner sep=0pt}, anchor=south west, inner sep=0pt, outer sep=0pt] at (%f, %f) {",grid_x_loc,grid_y_loc+0.05))
            for c=0, column-1, 1 do
                localPrint(string.format("%s", decimalToGreyBin(c, column_header_numb_bits)))
                if c ~= (column-1) then localPrint("\\&") end
            end
            localPrint("\\\\};")
        end
        -- Print out the side boolean row header
        if (is_multitable_seperated == false) or (d%2 == 0) then
            localPrint(string.format("\\matrix[matrix of nodes, ampersand replacement=\\&, row sep={1cm,between origins}, nodes={minimum height=1cm,inner sep=0pt, text height=2ex, text depth=0.5ex}, anchor=north east, inner sep=0pt, outer sep=0pt] at (%f, %f) {",grid_x_loc-0.05,grid_y_loc))
            for r=0, row-1, 1 do
                localPrint(string.format("%s \\\\", decimalToGreyBin(r, row_header_numb_bits)))
            end
            localPrint("};")
        end
        -- Print out the matrix
        localPrint(string.format("\\matrix[matrix of nodes, ampersand replacement=\\&, column sep={1cm,between origins}, row sep={1cm,between origins}, nodes={rectangle,draw,minimum height=1cm,align=center,text width=1cm,inner sep=0pt, text height=2ex, text depth=0.5ex, line width=0.015cm}, anchor=north west, inner sep=0pt, outer sep=0pt] at (%f, %f) {%s};",
                                    grid_x_loc, grid_y_loc, generateKMap(row, column, d)
                                    ))
        -- Print out the buttom text saying which matrix is which
        if (grid_numb > 0) then
            if (is_multitable_seperated == false) then
                localPrint(string.format("\\node[below] at (%f, %f) {%s = %s};", grid_x_loc+(column//2),grid_y_loc-row,var3, decimalToBin(d, 2)))
            elseif (is_multitable_seperated == true) then
                if (d < 2) then
                    localPrint(string.format("\\node[] at (%f, %f) {%s = %s};", grid_x_loc+(column//2), grid_y_loc+1, var3, decimalToBin(d, 2)))
                end
                if (d % 2 == 0) and (grid_numb > 2) then
                    localPrint(string.format("\\node[rotate=90] at (%f, %f) {%s = %s};", grid_x_loc-1, grid_y_loc-(row//2), var3, decimalToBin(d, 2)))
                end
            end
        end
    end
end
%\end{macrocode}
%\fi
%</luacode>
%
\endinput
