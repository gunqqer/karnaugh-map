%%
%% This is file `cartonaugh.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% cartonaugh.dtx  (with options: `package')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from cartonaugh.sty.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file cartonaugh.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%%
%% Copyright (C) 2015, 2016, 2017 Mattias Jacobsson and contributors
%% This work, karnaugh-map, is written from the ground up by Mattias Jacobsson. However the general implementation idea is based on the work published on [TeX - LaTeX Stack Exchange](https://tex.stackexchange.com) by [Ignasi](https://tex.stackexchange.com/users/1952/ignasi) found [here](https://tex.stackexchange.com/a/140581) and [here](https://tex.stackexchange.com/a/36879) which is licensed under [CC BY-SA](https://creativecommons.org/licenses/by-sa/3.0/). karnaugh-map is therefore licensed under [CC BY-SA](https://creativecommons.org/licenses/by-sa/3.0/). Contributors include [Oscar Gustafsson](https://github.com/oscargus).
%%

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{cartonaugh}[2017/02/20 v1.1 Draw Karnaugh Maps]

%%
%% Dependencies
%%

%% Check if ran under LuaLaTeX. If not, exit
\RequirePackage{iftex}
\RequireLuaTeX

%% parsing arguments
\RequirePackage{xparse}

%% working with strings
\RequirePackage{xstring}

%% drawing
\RequirePackage{tikz}
\usetikzlibrary{calc,matrix}

%%
%% Helpers
%%
\directlua{require("cartonaugh")}

%% convert decimal to color
\newcommand{\@cartonaugh@func@decimaltocolor@}[1]{%
  \ifnum#1=0 red\fi
  \ifnum#1=1 green\fi
  \ifnum#1=2 yellow\fi
  \ifnum#1=3 cyan\fi
  \ifnum#1=4 blue\fi
  \ifnum#1=5 magenta\fi
  \ifnum#1>5 cyan\fi
}

%% convert decimal to binary 6-bit
\newcommand{\@cartonaugh@func@decimaltobin@}[1]{\directlua{tex.sprint(decimalToBin(\the\numexpr(#1)\relax, 6))}}

%% command raises an error if executed outside the cartonaugh environment
\newcommand{\@cartonaugh@func@bailoutsideenvironment@}[0]{%
  \ifnum\@cartonaugh@var@mapsizex@\@cartonaugh@var@mapsizey@\@cartonaugh@var@mapsizez@=000
    \PackageError{cartonaugh}{%
      Command can not be used outside cartonaugh environment%
    }{%
      Do not use this command outside the cartonaugh environment.%
    }
  \fi
}

%% store map size
\newcommand{\@cartonaugh@var@mapsizex@}{0}
\newcommand{\@cartonaugh@var@mapsizey@}{0}
\newcommand{\@cartonaugh@var@mapsizez@}{0}

%% render in black and white or color default to '0'(false/color)
\newcommand{\@cartonaugh@var@bw@}{0}
\NewDocumentEnvironment{cartonaugh}{s O{4} O{4} O{1} O{$X_1X_0$} O{$X_3X_2$} O{$X_5X_4$}} {%
  \begingroup
    % store map size {[START]
      \renewcommand{\@cartonaugh@var@mapsizex@}{#2}%
      \renewcommand{\@cartonaugh@var@mapsizey@}{#3}%
      \renewcommand{\@cartonaugh@var@mapsizez@}{#4}%
    % [END]}
    % determinate if markings should be color or black and white
    \IfBooleanTF{#1}{%
      % should be black and white
      \renewcommand{\@cartonaugh@var@bw@}{1}%
    }{%
      % should be color
      \renewcommand{\@cartonaugh@var@bw@}{0}%
    }%
    %
    % [END]}
    % test if a matrix template is found or not(aka "\@cartonaugh@local@matrixtemplate@" equals to '0')
    \begin{tikzpicture}
        \directlua{draw_pgf_kmap(
                   \the\numexpr(\@cartonaugh@var@mapsizex@)\relax,
                   \the\numexpr(\@cartonaugh@var@mapsizey@)\relax,
                   \the\numexpr(\@cartonaugh@var@mapsizez@)\relax,
                   "\luaescapestring{\detokenize{#5}}",
                   "\luaescapestring{\detokenize{#6}}",
                   "\luaescapestring{\detokenize{#7}}"
                   )}
}{
    \end{tikzpicture}
  \endgroup
}

%%
%% Commands for filling out the cells
%%

%% store already used cells to avoid double filled cells and for auto completion
\newcommand{\@cartonaugh@var@usedcells@}{,}

\DeclareDocumentCommand{\autoterms}{O{-}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \begingroup
    % calculate max cell number {[START]
      \newcount\@cartonaugh@local@max@\relax
      \@cartonaugh@local@max@=\@cartonaugh@var@mapsizex@\relax
      \multiply\@cartonaugh@local@max@ by \@cartonaugh@var@mapsizey@\relax
      \multiply\@cartonaugh@local@max@ by \@cartonaugh@var@mapsizez@\relax
      \advance\@cartonaugh@local@max@ by -1\relax
    % [END]}
    % fill terms
    \foreach \cell in {0,1,2,...,\@cartonaugh@local@max@} {%
      \IfSubStr{\@cartonaugh@var@usedcells@}{,\cell,}{}{%
        \path (\@cartonaugh@func@decimaltobin@{\cell}) node {#1};
      }
    }
  \endgroup
  % update \@cartonaugh@var@usedcells@ (all cells are used now)
  \renewcommand{\@cartonaugh@var@usedcells@}{,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,}
}
\DeclareDocumentCommand{\indeterminants}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \terms{#1}{-}
}
\DeclareDocumentCommand{\manualterms}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \foreach \cellinfo [count=\cell from 0] in {#1} {%
    % only write to cell if it is empty otherwise fail silently
    \IfSubStr{\@cartonaugh@var@usedcells@}{,\cell,}{}{%
      \path (\@cartonaugh@func@decimaltobin@{\cell}) node {\cellinfo};
    }
  }
  % update \@cartonaugh@var@usedcells@ (previous cells + all cells up to \@cartonaugh@local@cellcount@ are used now) {[START]
    \newcommand{\@cartonaugh@local@tmpusedcells@}{}
    \newcount\@cartonaugh@local@cellcount@\relax
    % count number of cells in #1 {[START]
      \StrCount{#1}{,}[\@cartonaugh@local@tmpusedcells@]
      \@cartonaugh@local@cellcount@=\@cartonaugh@local@tmpusedcells@\relax
      \advance\@cartonaugh@local@cellcount@ by 1\relax
      \multiply\@cartonaugh@local@cellcount@ by 2\relax
    % [END]}
    % create sequence for \@cartonaugh@local@tmpusedcells@
    \StrLeft{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,}{\@cartonaugh@local@cellcount@}[\@cartonaugh@local@tmpusedcells@]
    % update \@cartonaugh@var@usedcells@ (append \@cartonaugh@local@tmpusedcells@)
    \expandafter\def\expandafter\@cartonaugh@var@usedcells@\expandafter{\@cartonaugh@var@usedcells@\@cartonaugh@local@tmpusedcells@}
  % [END]}
}
\DeclareDocumentCommand{\maxterms}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \terms{#1}{0}
}
\DeclareDocumentCommand{\minterms}{m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \terms{#1}{1}
}
\DeclareDocumentCommand{\terms}{m m} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \foreach \cell in {#1} {%
    % only write to cell if it is empty otherwise fail silently
    \IfSubStr{\@cartonaugh@var@usedcells@}{,\cell,}{}{%
      \path (\@cartonaugh@func@decimaltobin@{\cell}) node {#2};
    }
  }
  % update \@cartonaugh@var@usedcells@
  \expandafter\def\expandafter\@cartonaugh@var@usedcells@\expandafter{\@cartonaugh@var@usedcells@#1,}
}

%%
%% Commands for marking the cells
%%

%% keep track of used colors
\newcount\@cartonaugh@var@colorindex@\relax
\@cartonaugh@var@colorindex@=0\relax

\DeclareDocumentCommand{\implicant}{m m O{0}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \begingroup
    % loop through specified sub maps
    \foreach \map in {#3} {%
      % make sure we don't try to draw on non existing sub maps
      \ifnum\map<\@cartonaugh@var@mapsizez@
        % calculate cell number for the specified sub maps {[START]
          \newcount\@cartonaugh@local@northwest@\relax
          \newcount\@cartonaugh@local@southeast@\relax
          \@cartonaugh@local@northwest@=\map\relax
          \@cartonaugh@local@southeast@=\map\relax
          \multiply\@cartonaugh@local@northwest@ by 16\relax
          \multiply\@cartonaugh@local@southeast@ by 16\relax
          \advance\@cartonaugh@local@northwest@ by #1\relax
          \advance\@cartonaugh@local@southeast@ by #2\relax
        % [END]}
        % only fill marking when \@cartonaugh@var@bw@ = '0'
        \ifnum0=\@cartonaugh@var@bw@
          \fill[
            rounded corners=3pt,
            fill=\@cartonaugh@func@decimaltocolor@{\@cartonaugh@var@colorindex@},
            fill opacity=0.25,
          ] {
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@northwest@}.center)+(-0.3,0.3)$)
            rectangle
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@southeast@}.center)+(0.3,-0.3)$)
          };
        \fi
        \draw[
          rounded corners=3pt,
          draw opacity=1.0,
        ] {
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@northwest@}.center)+(-0.3,0.3)$)
          rectangle
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@southeast@}.center)+(0.3,-0.3)$)
        };
      \else
        \PackageWarning{cartonaugh}{%
          You can only draw on existing sub maps.
          Ignoring instruction to draw on non existing sub map number \map%
        }
      \fi
    }
  \endgroup
  % mark color as used
  \advance\@cartonaugh@var@colorindex@ by 1\relax
}
\DeclareDocumentCommand{\implicantedge}{m m m m O{0}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  \begingroup
    % helper variables {[START]
      \newcommand{\@cartonaugh@local@orientation@}{0} % '0' is a vertical and '1' is a horizontal implicant
      \newcommand{\@cartonaugh@local@coordinateone@}{0}
      \newcommand{\@cartonaugh@local@coordinatetwo@}{0}
      \newcommand{\@cartonaugh@local@mirror@}{1} % '1' or '-1' to mirror
      \newcommand{\@cartonaugh@local@bordercontent@}{}
      \newcommand{\@cartonaugh@local@fillcontent@}{}
    % [END]}
    % determinate if this is an horizontal or vertical implicant {[START]
      \newcount\@cartonaugh@local@testcaseone@\relax
      \newcount\@cartonaugh@local@testcasetwo@\relax
      \@cartonaugh@local@testcaseone@=#1\relax
      \@cartonaugh@local@testcasetwo@=#1\relax
      \advance\@cartonaugh@local@testcaseone@ by -#2\relax
      \advance\@cartonaugh@local@testcasetwo@ by -#3\relax
      \ifnum\@cartonaugh@local@testcaseone@<0 \multiply\@cartonaugh@local@testcaseone@ by -1\relax\fi
      \ifnum\@cartonaugh@local@testcasetwo@<0 \multiply\@cartonaugh@local@testcasetwo@ by -1\relax\fi
      % test case one
      \ifnum\@cartonaugh@local@testcaseone@<\@cartonaugh@var@mapsizex@
        % this is a vertical implicant
        \renewcommand{\@cartonaugh@local@orientation@}{0}
      \else
        % this is a horizontal implicant
        \renewcommand{\@cartonaugh@local@orientation@}{1}
      \fi
      % test case two
      \ifnum\@cartonaugh@local@testcasetwo@<\@cartonaugh@var@mapsizex@
        % this is a vertical implicant
        \renewcommand{\@cartonaugh@local@orientation@}{1}
      \fi
    % [END]}
    % loop through specified sub maps
    \foreach \map in {#5} {%
      % make sure we don't try to draw on non existing sub maps
      \ifnum\map<\@cartonaugh@var@mapsizez@
        % loop through both parts of the marking(ie. left and right part)
        \foreach \i in {0,1} {%
          % set parameters depending on the part of the marking(ie. left and right part) {[START]
            \ifnum\i=0
              \renewcommand{\@cartonaugh@local@coordinateone@}{#1}
              \renewcommand{\@cartonaugh@local@coordinatetwo@}{#2}
              \renewcommand{\@cartonaugh@local@mirror@}{1}
            \else
              \renewcommand{\@cartonaugh@local@coordinateone@}{#3}
              \renewcommand{\@cartonaugh@local@coordinatetwo@}{#4}
              \renewcommand{\@cartonaugh@local@mirror@}{-1}
            \fi
          % [END]}
          % calculate cell numbers for the specified sub map {[START]
            \newcount\@cartonaugh@local@coordinateonecounter@\relax
            \newcount\@cartonaugh@local@coordinatetwocounter@\relax
            \@cartonaugh@local@coordinateonecounter@=\map\relax
            \@cartonaugh@local@coordinatetwocounter@=\map\relax
            \multiply\@cartonaugh@local@coordinateonecounter@ by 16\relax
            \multiply\@cartonaugh@local@coordinatetwocounter@ by 16\relax
            \advance\@cartonaugh@local@coordinateonecounter@ by \@cartonaugh@local@coordinateone@\relax
            \advance\@cartonaugh@local@coordinatetwocounter@ by \@cartonaugh@local@coordinatetwo@\relax
            \renewcommand{\@cartonaugh@local@coordinateone@}{\@cartonaugh@local@coordinateonecounter@}
            \renewcommand{\@cartonaugh@local@coordinatetwo@}{\@cartonaugh@local@coordinatetwocounter@}
          % [END]}
          % select drawing content depending on orientation {[START]
            \ifnum\@cartonaugh@local@orientation@=0
              % this is a vertical implicant
              \renewcommand{\@cartonaugh@local@fillcontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,.6*\@cartonaugh@local@mirror@)$)
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,.6*\@cartonaugh@local@mirror@)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,-.3*\@cartonaugh@local@mirror@)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,-.3*\@cartonaugh@local@mirror@)$) }
                -- cycle
              }
              \renewcommand{\@cartonaugh@local@bordercontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,.6*\@cartonaugh@local@mirror@)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3,-.3*\@cartonaugh@local@mirror@)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,-.3*\@cartonaugh@local@mirror@)$) }
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.3,.6*\@cartonaugh@local@mirror@)$)
              }
            \else
              % this is a horizontal implicant
              \renewcommand{\@cartonaugh@local@fillcontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(-.6*\@cartonaugh@local@mirror@,-.3)$)
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.6*\@cartonaugh@local@mirror@,.3)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(.3*\@cartonaugh@local@mirror@,.3)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3*\@cartonaugh@local@mirror@,-.3)$) }
                -- cycle
              }
              \renewcommand{\@cartonaugh@local@bordercontent@}{%
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(-.6*\@cartonaugh@local@mirror@,.3)$)
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinateone@}.center)+(.3*\@cartonaugh@local@mirror@,.3)$) }
                { [rounded corners=3pt] --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(.3*\@cartonaugh@local@mirror@,-.3)$) }
                --
                ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinatetwo@}.center)+(-.6*\@cartonaugh@local@mirror@,-.3)$)
              }
            \fi
          % [END]}
          % draw
          % only fill marking when \@cartonaugh@var@bw@ = '0'
          \ifnum0=\@cartonaugh@var@bw@
            \fill[
              sharp corners,
              fill=\@cartonaugh@func@decimaltocolor@{\@cartonaugh@var@colorindex@},
              fill opacity=0.25,
            ] {
              \@cartonaugh@local@fillcontent@%
            };
          \fi
          \draw[
            sharp corners,
            draw opacity=1.0,
          ] {
            \@cartonaugh@local@bordercontent@%
          };
        }
      \else
        \PackageWarning{cartonaugh}{%
          You can only draw on existing sub maps.
          Ignoring instruction to draw on non existing sub map number \map%
        }
      \fi
    }
  \endgroup
  % mark color as used
  \advance\@cartonaugh@var@colorindex@ by 1\relax
}
\DeclareDocumentCommand{\implicantcorner}{O{0}} {%
  % bail if outside environment cartonaugh
  \@cartonaugh@func@bailoutsideenvironment@{}
  %
  % make sure "\implicantcorner" only are used on 4x4 maps
  \ifnum\@cartonaugh@var@mapsizex@\@cartonaugh@var@mapsizey@=44
    % loop through specified sub maps
    \foreach \map in {#1} {%
      % make sure we don't try to draw on non existing sub maps
      \ifnum\map<\@cartonaugh@var@mapsizez@
        % loop through the four corners
        \foreach \corner in {0,2,8,10} {%
          % calculate corner's properties {[START]
            \newcount\@cartonaugh@local@coordinate@\relax
            \@cartonaugh@local@coordinate@=\map\relax
            \multiply\@cartonaugh@local@coordinate@ by 16\relax
            \advance\@cartonaugh@local@coordinate@ by \corner\relax
            \newcommand{\@cartonaugh@local@mirrorx@}{0} % '1' or '-1' to mirror
            \newcommand{\@cartonaugh@local@mirrory@}{0} % '1' or '-1' to mirror
            \ifnum\corner=0 \renewcommand{\@cartonaugh@local@mirrorx@}{1}\renewcommand{\@cartonaugh@local@mirrory@}{1}\fi
            \ifnum\corner=2 \renewcommand{\@cartonaugh@local@mirrorx@}{-1}\renewcommand{\@cartonaugh@local@mirrory@}{1}\fi
            \ifnum\corner=8 \renewcommand{\@cartonaugh@local@mirrorx@}{1}\renewcommand{\@cartonaugh@local@mirrory@}{-1}\fi
            \ifnum\corner=10 \renewcommand{\@cartonaugh@local@mirrorx@}{-1}\renewcommand{\@cartonaugh@local@mirrory@}{-1}\fi
          % [END]}
          % draw
          % only fill marking when \@cartonaugh@var@bw@ = '0'
          \ifnum0=\@cartonaugh@var@bw@
            \fill[
              sharp corners,
              fill=\@cartonaugh@func@decimaltocolor@{\@cartonaugh@var@colorindex@},
              fill opacity=0.25,
            ]
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(-.6*\@cartonaugh@local@mirrorx@,.6*\@cartonaugh@local@mirrory@)$)
            --
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,.6*\@cartonaugh@local@mirrory@)$)
            { [rounded corners=3pt] --
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$) }
            --
            ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(-.6*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$)
            -- cycle;
          \fi
          \draw[
            sharp corners,
            draw opacity=1.0,
          ]
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,.6*\@cartonaugh@local@mirrory@)$)
          { [rounded corners=3pt] --
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(.3*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$) }
          --
          ($(\@cartonaugh@func@decimaltobin@{\@cartonaugh@local@coordinate@}.center)+(-.6*\@cartonaugh@local@mirrorx@,-.3*\@cartonaugh@local@mirrory@)$);
        }
      \else
        \PackageWarning{cartonaugh}{%
          You can only draw on existing sub maps.
          Ignoring instruction to draw on non existing sub map number \map%
        }
      \fi
    }
    % mark color as used
    \advance\@cartonaugh@var@colorindex@ by 1\relax
  \else
    % print error if "\implicantcorner" are used on non 4x4 map
    \PackageError{cartonaugh}{%
      \protect\implicantcorner\space can only be used on 4x4 maps%
    }{%
      You are trying to use \protect\implicantcorner\space on non 4x4 map.%
    }
  \fi
}
\endinput
%%
%% End of file `cartonaugh.sty'.
